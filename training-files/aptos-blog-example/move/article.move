// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module aptos_blog_demo::article {
    use aptos_blog_demo::comment::{Self, Comment};
    use aptos_blog_demo::genesis_account;
    use aptos_blog_demo::pass_object;
    use aptos_framework::account;
    use aptos_framework::event;
    use aptos_std::table::{Self, Table};
    use aptos_std::table_with_length::{Self, TableWithLength};
    use std::string::String;
    friend aptos_blog_demo::article_create_logic;
    friend aptos_blog_demo::article_update_logic;
    friend aptos_blog_demo::article_delete_logic;
    friend aptos_blog_demo::article_add_comment_logic;
    friend aptos_blog_demo::article_remove_comment_logic;
    friend aptos_blog_demo::article_update_comment_logic;
    friend aptos_blog_demo::article_aggregate;

    const EID_ALREADY_EXISTS: u64 = 101;
    const EDATA_TOO_LONG: u64 = 102;
    const EINAPPROPRIATE_VERSION: u64 = 103;
    const EID_NOT_FOUND: u64 = 106;
    const ENOT_INITIALIZED: u64 = 110;

    struct Events has key {
        // article_id_generator_created_handle: event::EventHandle<ArticleIdGeneratorCreated>,
        article_created_handle: event::EventHandle<ArticleCreated>,
        article_updated_handle: event::EventHandle<ArticleUpdated>,
        article_deleted_handle: event::EventHandle<ArticleDeleted>,
        comment_added_handle: event::EventHandle<CommentAdded>,
        comment_removed_handle: event::EventHandle<CommentRemoved>,
        comment_updated_handle: event::EventHandle<CommentUpdated>,
    }

    struct Tables has key {
        article_table: Table<u128, Article>,
    }

    struct ArticleIdGenerator has key {
        sequence: u128,
    }


    public fun initialize(account: &signer) {
        genesis_account::assert_genesis_account(account);

        let res_account = genesis_account::resource_account_signer();
        move_to(&res_account, Events {
            // article_id_generator_created_handle: account::new_event_handle<ArticleIdGeneratorCreated>(&res_account),
            article_created_handle: account::new_event_handle<ArticleCreated>(&res_account),
            article_updated_handle: account::new_event_handle<ArticleUpdated>(&res_account),
            article_deleted_handle: account::new_event_handle<ArticleDeleted>(&res_account),
            comment_added_handle: account::new_event_handle<CommentAdded>(&res_account),
            comment_removed_handle: account::new_event_handle<CommentRemoved>(&res_account),
            comment_updated_handle: account::new_event_handle<CommentUpdated>(&res_account),
        });

        let article_id_generator = ArticleIdGenerator {
            sequence: 0,
        };
        move_to(&res_account, article_id_generator);
        // let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        // event::emit_event(&mut events.article_id_generator_created_handle, ArticleIdGeneratorCreated {
        // });

        move_to(
            &res_account,
            Tables {
                article_table: table::new(),
            },
        );

    }

    struct Article has store {
        article_id: u128,
        version: u64,
        title: String,
        body: String,
        owner: address,
        comments: TableWithLength<u64, Comment>,
        comment_seq_id_generator: CommentSeqIdGenerator,
    }

    struct CommentSeqIdGenerator has store {
        sequence: u64,
    }

    public(friend) fun current_comment_seq_id(article: &Article): u64 {
        article.comment_seq_id_generator.sequence
    }

    public(friend) fun next_comment_seq_id(article: &mut Article): u64 {
        article.comment_seq_id_generator.sequence = article.comment_seq_id_generator.sequence + 1;
        article.comment_seq_id_generator.sequence
    }

    public fun article_id(article: &Article): u128 {
        article.article_id
    }

    public fun version(article: &Article): u64 {
        article.version
    }

    public fun title(article: &Article): String {
        article.title
    }

    public(friend) fun set_title(article: &mut Article, title: String) {
        assert!(std::string::length(&title) <= 200, EDATA_TOO_LONG);
        article.title = title;
    }

    public fun body(article: &Article): String {
        article.body
    }

    public(friend) fun set_body(article: &mut Article, body: String) {
        assert!(std::string::length(&body) <= 2000, EDATA_TOO_LONG);
        article.body = body;
    }

    public fun owner(article: &Article): address {
        article.owner
    }

    public(friend) fun set_owner(article: &mut Article, owner: address) {
        article.owner = owner;
    }

    public(friend) fun add_comment(article: &mut Article, comment: Comment) {
        let key = comment::comment_seq_id(&comment);
        assert!(!table_with_length::contains(&article.comments, key), EID_ALREADY_EXISTS);
        table_with_length::add(&mut article.comments, key, comment);
    }

    public(friend) fun remove_comment(article: &mut Article, comment_seq_id: u64) {
        assert!(table_with_length::contains(&article.comments, comment_seq_id), EID_NOT_FOUND);
        let comment = table_with_length::remove(&mut article.comments, comment_seq_id);
        comment::drop_comment(comment);
    }

    public(friend) fun borrow_mut_comment(article: &mut Article, comment_seq_id: u64): &mut Comment {
        table_with_length::borrow_mut(&mut article.comments, comment_seq_id)
    }

    public fun borrow_comment(article: &Article, comment_seq_id: u64): &Comment {
        table_with_length::borrow(&article.comments, comment_seq_id)
    }

    public fun comments_contains(article: &Article, comment_seq_id: u64): bool {
        table_with_length::contains(&article.comments, comment_seq_id)
    }

    public fun comments_length(article: &Article): u64 {
        table_with_length::length(&article.comments)
    }

    fun new_article(
        article_id: u128,
        title: String,
        body: String,
        owner: address,
    ): Article {
        assert!(std::string::length(&title) <= 200, EDATA_TOO_LONG);
        assert!(std::string::length(&body) <= 2000, EDATA_TOO_LONG);
        Article {
            article_id,
            version: 0,
            title,
            body,
            owner,
            comments: table_with_length::new<u64, Comment>(),
            comment_seq_id_generator: CommentSeqIdGenerator { sequence: 0, },
        }
    }

    struct ArticleCreated has store, drop {
        article_id: u128,
        title: String,
        body: String,
        owner: address,
    }

    public fun article_created_article_id(article_created: &ArticleCreated): u128 {
        article_created.article_id
    }

    public fun article_created_title(article_created: &ArticleCreated): String {
        article_created.title
    }

    public fun article_created_body(article_created: &ArticleCreated): String {
        article_created.body
    }

    public fun article_created_owner(article_created: &ArticleCreated): address {
        article_created.owner
    }

    public(friend) fun new_article_created(
        title: String,
        body: String,
        owner: address,
    ): ArticleCreated acquires ArticleIdGenerator {
        assert!(exists<ArticleIdGenerator>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let article_id_generator = borrow_global_mut<ArticleIdGenerator>(genesis_account::resouce_account_address());
        let article_id = next_article_id(article_id_generator);
        ArticleCreated {
            article_id,
            title,
            body,
            owner,
        }
    }

    struct ArticleUpdated has store, drop {
        article_id: u128,
        version: u64,
        title: String,
        body: String,
        owner: address,
    }

    public fun article_updated_article_id(article_updated: &ArticleUpdated): u128 {
        article_updated.article_id
    }

    public fun article_updated_title(article_updated: &ArticleUpdated): String {
        article_updated.title
    }

    public fun article_updated_body(article_updated: &ArticleUpdated): String {
        article_updated.body
    }

    public fun article_updated_owner(article_updated: &ArticleUpdated): address {
        article_updated.owner
    }

    public(friend) fun new_article_updated(
        article: &Article,
        title: String,
        body: String,
        owner: address,
    ): ArticleUpdated {
        ArticleUpdated {
            article_id: article_id(article),
            version: version(article),
            title,
            body,
            owner,
        }
    }

    struct ArticleDeleted has store, drop {
        article_id: u128,
        version: u64,
    }

    public fun article_deleted_article_id(article_deleted: &ArticleDeleted): u128 {
        article_deleted.article_id
    }

    public(friend) fun new_article_deleted(
        article: &Article,
    ): ArticleDeleted {
        ArticleDeleted {
            article_id: article_id(article),
            version: version(article),
        }
    }

    struct CommentAdded has store, drop {
        article_id: u128,
        version: u64,
        comment_seq_id: u64,
        commenter: String,
        body: String,
        owner: address,
    }

    public fun comment_added_article_id(comment_added: &CommentAdded): u128 {
        comment_added.article_id
    }

    public fun comment_added_comment_seq_id(comment_added: &CommentAdded): u64 {
        comment_added.comment_seq_id
    }

    public fun comment_added_commenter(comment_added: &CommentAdded): String {
        comment_added.commenter
    }

    public fun comment_added_body(comment_added: &CommentAdded): String {
        comment_added.body
    }

    public fun comment_added_owner(comment_added: &CommentAdded): address {
        comment_added.owner
    }

    public(friend) fun new_comment_added(
        article: &Article,
        comment_seq_id: u64,
        commenter: String,
        body: String,
        owner: address,
    ): CommentAdded {
        CommentAdded {
            article_id: article_id(article),
            version: version(article),
            comment_seq_id,
            commenter,
            body,
            owner,
        }
    }

    struct CommentRemoved has store, drop {
        article_id: u128,
        version: u64,
        comment_seq_id: u64,
    }

    public fun comment_removed_article_id(comment_removed: &CommentRemoved): u128 {
        comment_removed.article_id
    }

    public fun comment_removed_comment_seq_id(comment_removed: &CommentRemoved): u64 {
        comment_removed.comment_seq_id
    }

    public(friend) fun new_comment_removed(
        article: &Article,
        comment_seq_id: u64,
    ): CommentRemoved {
        CommentRemoved {
            article_id: article_id(article),
            version: version(article),
            comment_seq_id,
        }
    }

    struct CommentUpdated has store, drop {
        article_id: u128,
        version: u64,
        comment_seq_id: u64,
        commenter: String,
        body: String,
        owner: address,
    }

    public fun comment_updated_article_id(comment_updated: &CommentUpdated): u128 {
        comment_updated.article_id
    }

    public fun comment_updated_comment_seq_id(comment_updated: &CommentUpdated): u64 {
        comment_updated.comment_seq_id
    }

    public fun comment_updated_commenter(comment_updated: &CommentUpdated): String {
        comment_updated.commenter
    }

    public fun comment_updated_body(comment_updated: &CommentUpdated): String {
        comment_updated.body
    }

    public fun comment_updated_owner(comment_updated: &CommentUpdated): address {
        comment_updated.owner
    }

    public(friend) fun new_comment_updated(
        article: &Article,
        comment_seq_id: u64,
        commenter: String,
        body: String,
        owner: address,
    ): CommentUpdated {
        CommentUpdated {
            article_id: article_id(article),
            version: version(article),
            comment_seq_id,
            commenter,
            body,
            owner,
        }
    }


    public(friend) fun create_article(
        title: String,
        body: String,
        owner: address,
    ): Article acquires ArticleIdGenerator {
        assert!(exists<ArticleIdGenerator>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let article_id_generator = borrow_global<ArticleIdGenerator>(genesis_account::resouce_account_address());
        let article_id = current_article_id(article_id_generator);
        let article = new_article(
            article_id,
            title,
            body,
            owner,
        );
        article
    }

    fun current_article_id(
        article_id_generator: &ArticleIdGenerator,
    ): u128 {
        article_id_generator.sequence
    }

    fun next_article_id(
        article_id_generator: &mut ArticleIdGenerator,
    ): u128 {
        article_id_generator.sequence = article_id_generator.sequence + 1;
        current_article_id(article_id_generator)
    }

    public(friend) fun update_version_and_add(article: Article) acquires Tables {
        article.version = article.version + 1;
        //assert!(article.version != 0, EINAPPROPRIATE_VERSION);
        private_add_article(article);
    }

    public(friend) fun add_article(article: Article) acquires Tables {
        assert!(article.version == 0, EINAPPROPRIATE_VERSION);
        private_add_article(article);
    }

    public(friend) fun remove_article(article_id: u128): Article acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::remove(&mut tables.article_table, article_id)
    }

    fun private_add_article(article: Article) acquires Tables {
        assert!(exists<Tables>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let tables = borrow_global_mut<Tables>(genesis_account::resouce_account_address());
        table::add(&mut tables.article_table, article_id(&article), article);
    }

    public fun get_article(article_id: u128): pass_object::PassObject<Article> acquires Tables {
        let article = remove_article(article_id);
        pass_object::new(article)
    }

    public fun return_article(article_pass_obj: pass_object::PassObject<Article>) acquires Tables {
        let article = pass_object::extract(article_pass_obj);
        private_add_article(article);
    }

    public(friend) fun drop_article(article: Article) {
        let Article {
            version: _version,
            article_id: _article_id,
            title: _title,
            body: _body,
            owner: _owner,
            comments,
            comment_seq_id_generator,
        } = article;
        let CommentSeqIdGenerator {
            sequence: _,
        } = comment_seq_id_generator;
        table_with_length::destroy_empty(comments);
    }

    public(friend) fun emit_article_created(article_created: ArticleCreated) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.article_created_handle, article_created);
    }

    public(friend) fun emit_article_updated(article_updated: ArticleUpdated) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.article_updated_handle, article_updated);
    }

    public(friend) fun emit_article_deleted(article_deleted: ArticleDeleted) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.article_deleted_handle, article_deleted);
    }

    public(friend) fun emit_comment_added(comment_added: CommentAdded) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.comment_added_handle, comment_added);
    }

    public(friend) fun emit_comment_removed(comment_removed: CommentRemoved) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.comment_removed_handle, comment_removed);
    }

    public(friend) fun emit_comment_updated(comment_updated: CommentUpdated) acquires Events {
        assert!(exists<Events>(genesis_account::resouce_account_address()), ENOT_INITIALIZED);
        let events = borrow_global_mut<Events>(genesis_account::resouce_account_address());
        event::emit_event(&mut events.comment_updated_handle, comment_updated);
    }

}
